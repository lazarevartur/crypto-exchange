datasource db {
  provider = "postgresql" // или другой провайдер, например, mysql
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum PaymentStatus {
  PENDING
  REJECTED
  ACCEPTED
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id        String    @id @default(uuid())
  account   String?
  payments  Payment[]
  createdAt DateTime  @default(now()) @map("created_at")
  role      UserRole  @default(USER)
  Ticket    Ticket[]
}

model Token {
  id               String    @id @default(uuid())
  name             String    @unique
  symbol           String    @unique
  imageUrl         String
  address          String    @default("")
  amount           Float
  price            Float
  network          String
  createdAt        DateTime  @default(now()) @map("created_at")
  PaymentTokenFrom Payment[] @relation("TokenFrom")
  PaymentTokenTo   Payment[] @relation("TokenTo")
  tags             String[]
  min              Float     @default(0.1)
  infoText         String?
}

model Payment {
  id               String        @id @default(uuid())
  fromTokenId      String
  fromToken        Token         @relation("TokenFrom", fields: [fromTokenId], references: [id])
  fromAmount       String
  toTokenId        String
  toToken          Token         @relation("TokenTo", fields: [toTokenId], references: [id])
  toAmount         String
  recipientAddress String
  recipientEmail   String
  userId           String
  user             User          @relation(fields: [userId], references: [id])
  expiresIn        DateTime      @default(now()) @map("expires_in")
  createdAt        DateTime      @default(now()) @map("created_at")
  closedIn         DateTime?     @map("closed_in")
  status           PaymentStatus @default(PENDING)
  approveStatus    PaymentStatus @default(PENDING)
  network          String
  Ticket           Ticket[]
}

model Ticket {
  id             String        @id @default(uuid())
  paymentId      String
  payment        Payment       @relation(fields: [paymentId], references: [id])
  userId         String
  user           User          @relation(fields: [userId], references: [id])
  tokenFromPrice Float
  tokenToPrice   Float
  status         PaymentStatus @default(PENDING)
  createdAt      DateTime      @default(now())
  closedAt       DateTime?
}

model Tag {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now()) @map("created_at")
}
